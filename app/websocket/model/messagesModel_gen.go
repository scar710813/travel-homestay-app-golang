// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	messagesFieldNames          = builder.RawFieldNames(&Messages{})
	messagesRows                = strings.Join(messagesFieldNames, ",")
	messagesRowsExpectAutoSet   = strings.Join(stringx.Remove(messagesFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	messagesRowsWithPlaceHolder = strings.Join(stringx.Remove(messagesFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheLooklookUsercenterMessagesIdPrefix = "cache:looklookUsercenter:messages:id:"
)

type (
	messagesModel interface {
		Insert(ctx context.Context, data *Messages) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Messages, error)
		Update(ctx context.Context, data *Messages) error
		Delete(ctx context.Context, id int64) error
	}

	defaultMessagesModel struct {
		sqlc.CachedConn
		table string
	}

	Messages struct {
		Id         int64     `db:"id"`
		FromUserId int64     `db:"from_user_id"`
		ToUserId   int64     `db:"to_user_id"`
		Content    string    `db:"content"`
		CreateTime time.Time `db:"create_time"`
	}
)

func newMessagesModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultMessagesModel {
	return &defaultMessagesModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`messages`",
	}
}

func (m *defaultMessagesModel) Delete(ctx context.Context, id int64) error {
	looklookUsercenterMessagesIdKey := fmt.Sprintf("%s%v", cacheLooklookUsercenterMessagesIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, looklookUsercenterMessagesIdKey)
	return err
}

func (m *defaultMessagesModel) FindOne(ctx context.Context, id int64) (*Messages, error) {
	looklookUsercenterMessagesIdKey := fmt.Sprintf("%s%v", cacheLooklookUsercenterMessagesIdPrefix, id)
	var resp Messages
	err := m.QueryRowCtx(ctx, &resp, looklookUsercenterMessagesIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", messagesRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultMessagesModel) Insert(ctx context.Context, data *Messages) (sql.Result, error) {
	looklookUsercenterMessagesIdKey := fmt.Sprintf("%s%v", cacheLooklookUsercenterMessagesIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, messagesRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.FromUserId, data.ToUserId, data.Content)
	}, looklookUsercenterMessagesIdKey)
	return ret, err
}

func (m *defaultMessagesModel) Update(ctx context.Context, data *Messages) error {
	looklookUsercenterMessagesIdKey := fmt.Sprintf("%s%v", cacheLooklookUsercenterMessagesIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, messagesRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.FromUserId, data.ToUserId, data.Content, data.Id)
	}, looklookUsercenterMessagesIdKey)
	return err
}

func (m *defaultMessagesModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheLooklookUsercenterMessagesIdPrefix, primary)
}

func (m *defaultMessagesModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", messagesRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultMessagesModel) tableName() string {
	return m.table
}
