// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"github.com/Masterminds/squirrel"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	historyHomestayFieldNames          = builder.RawFieldNames(&HistoryHomestay{})
	historyHomestayRows                = strings.Join(historyHomestayFieldNames, ",")
	historyHomestayRowsExpectAutoSet   = strings.Join(stringx.Remove(historyHomestayFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	historyHomestayRowsWithPlaceHolder = strings.Join(stringx.Remove(historyHomestayFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheLooklookTravelHistoryHomestayIdPrefix = "cache:looklookTravel:historyHomestay:id:"
)

type (
	historyHomestayModel interface {
		Insert(ctx context.Context, data *HistoryHomestay) (sql.Result, error)
		SelectBuilder() squirrel.SelectBuilder
		FindOne(ctx context.Context, id int64) (*HistoryHomestay, error)
		FindOneByUserId(ctx context.Context, userId int64) (*HistoryHomestay, error)
		FindAll(ctx context.Context,builder squirrel.SelectBuilder,orderBy string)([]*HistoryHomestay,error)
		Update(ctx context.Context, data *HistoryHomestay) error
		Delete(ctx context.Context, id int64) error
	}

	defaultHistoryHomestayModel struct {
		sqlc.CachedConn
		table string
	}

	HistoryHomestay struct {
		Id        int64 `db:"id"`
		HistoryId int64 `db:"history_id"`
		UserId    int64 `db:"user_id"`
	}
)

func newHistoryHomestayModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultHistoryHomestayModel {
	return &defaultHistoryHomestayModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`history_homestay`",
	}
}

func (m *defaultHistoryHomestayModel) Delete(ctx context.Context, id int64) error {
	looklookTravelHistoryHomestayIdKey := fmt.Sprintf("%s%v", cacheLooklookTravelHistoryHomestayIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, looklookTravelHistoryHomestayIdKey)
	return err
}

func (m *defaultHistoryHomestayModel) SelectBuilder() squirrel.SelectBuilder {
	return squirrel.Select().From(m.table)
}

func (m *defaultHistoryHomestayModel) FindOne(ctx context.Context, id int64) (*HistoryHomestay, error) {
	looklookTravelHistoryHomestayIdKey := fmt.Sprintf("%s%v", cacheLooklookTravelHistoryHomestayIdPrefix, id)
	var resp HistoryHomestay
	err := m.QueryRowCtx(ctx, &resp, looklookTravelHistoryHomestayIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", historyHomestayRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultHistoryHomestayModel) FindOneByUserId(ctx context.Context, userId int64) (*HistoryHomestay, error) {
	looklookTravelHistoryHomestayIdKey := fmt.Sprintf("%s%v", cacheLooklookTravelHistoryHomestayIdPrefix, userId)
	var resp HistoryHomestay
	err := m.QueryRowCtx(ctx, &resp, looklookTravelHistoryHomestayIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `user_id` = ? limit 1", historyHomestayRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, userId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultHistoryHomestayModel) FindAll(ctx context.Context,builder squirrel.SelectBuilder,orderBy string)([]*HistoryHomestay,error){

	builder = builder.Columns(historyHomestayRows)
	if orderBy == "" {
		builder.OrderBy("id desc")
	} else {
		builder.OrderBy(orderBy)
	}
	query, values, err := builder.Where("").ToSql()
	var resp []*HistoryHomestay
	m.QueryRowsNoCacheCtx(ctx, &resp, query, values...)
	switch err {
	case nil:
		return resp, nil
	default:
		return nil, err
	}
}

func (m *defaultHistoryHomestayModel) Insert(ctx context.Context, data *HistoryHomestay) (sql.Result, error) {
	looklookTravelHistoryHomestayIdKey := fmt.Sprintf("%s%v", cacheLooklookTravelHistoryHomestayIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, historyHomestayRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.HistoryId, data.UserId)
	}, looklookTravelHistoryHomestayIdKey)
	return ret, err
}

func (m *defaultHistoryHomestayModel) Update(ctx context.Context, data *HistoryHomestay) error {
	looklookTravelHistoryHomestayIdKey := fmt.Sprintf("%s%v", cacheLooklookTravelHistoryHomestayIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, historyHomestayRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.HistoryId, data.UserId, data.Id)
	}, looklookTravelHistoryHomestayIdKey)
	return err
}

func (m *defaultHistoryHomestayModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheLooklookTravelHistoryHomestayIdPrefix, primary)
}

func (m *defaultHistoryHomestayModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", historyHomestayRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultHistoryHomestayModel) tableName() string {
	return m.table
}
